{
  "stats": {
    "suites": 1,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-19T22:23:39.150Z",
    "end": "2025-09-19T22:23:39.578Z",
    "duration": 428,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "c7185ae7-5ba0-4b7f-90c6-bf77bda73271",
      "title": "",
      "fullFile": "C:\\Users\\amanda.coliveira\\Documents\\Pessoal\\PosGraduacao\\7 - Automação de Teste na Camada de Serviço (API)\\PGATS_API_TrabalhoFinal\\test\\rest\\controller\\testesFelizesController.test.js",
      "file": "\\test\\rest\\controller\\testesFelizesController.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "cc00144a-0b79-4379-bc7a-983eee171d75",
          "title": "Testes de cenários felizes da API Rest a nível de Controller",
          "fullFile": "C:\\Users\\amanda.coliveira\\Documents\\Pessoal\\PosGraduacao\\7 - Automação de Teste na Camada de Serviço (API)\\PGATS_API_TrabalhoFinal\\test\\rest\\controller\\testesFelizesController.test.js",
          "file": "\\test\\rest\\controller\\testesFelizesController.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Testes de cenários felizes da API Rest a nível de Controller\"",
              "fullTitle": "Testes de cenários felizes da API Rest a nível de Controller \"before all\" hook in \"Testes de cenários felizes da API Rest a nível de Controller\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "users.length = 0;\ntasks.length = 0;",
              "err": {},
              "uuid": "5013ee85-51f6-49c5-afb0-bba5a4959a46",
              "parentUUID": "cc00144a-0b79-4379-bc7a-983eee171d75",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Registrar usuário \"Amanda\" com sucesso",
              "fullTitle": "Testes de cenários felizes da API Rest a nível de Controller Registrar usuário \"Amanda\" com sucesso",
              "timedOut": false,
              "duration": 99,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const resposta = await request(app)\n    .post('/register')\n    .send(usuario);\nexpect(resposta.status).to.equal(201);\nexpect(resposta.body).to.have.property('message', 'Usuário registrado com sucesso.');",
              "err": {},
              "uuid": "ca3a0ea9-8dc4-4b9e-a0c1-0ee2e416e549",
              "parentUUID": "cc00144a-0b79-4379-bc7a-983eee171d75",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Registrar usuário \"Bruno\" com sucesso",
              "fullTitle": "Testes de cenários felizes da API Rest a nível de Controller Registrar usuário \"Bruno\" com sucesso",
              "timedOut": false,
              "duration": 30,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const resposta = await request(app)\n    .post('/register')\n    .send(usuario);\nexpect(resposta.status).to.equal(201);\nexpect(resposta.body).to.have.property('message', 'Usuário registrado com sucesso.');",
              "err": {},
              "uuid": "4fcdab9f-1ebb-490c-a3cf-f576b7664274",
              "parentUUID": "cc00144a-0b79-4379-bc7a-983eee171d75",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Login do usuário \"Amanda\"",
              "fullTitle": "Testes de cenários felizes da API Rest a nível de Controller Login do usuário \"Amanda\"",
              "timedOut": false,
              "duration": 40,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const resposta = await request(app)\n    .post('/login')\n    .send(login);\nexpect(resposta.status).to.equal(200);\nexpect(resposta.body).to.have.property('token');",
              "err": {},
              "uuid": "cc4ec8ed-020d-496f-8ee1-0e731a8944b3",
              "parentUUID": "cc00144a-0b79-4379-bc7a-983eee171d75",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Login do usuário \"Bruno\"",
              "fullTitle": "Testes de cenários felizes da API Rest a nível de Controller Login do usuário \"Bruno\"",
              "timedOut": false,
              "duration": 34,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const resposta = await request(app)\n    .post('/login')\n    .send(login);\nexpect(resposta.status).to.equal(200);\nexpect(resposta.body).to.have.property('token');",
              "err": {},
              "uuid": "509128fc-9db7-43cf-8511-edefe8f89a82",
              "parentUUID": "cc00144a-0b79-4379-bc7a-983eee171d75",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Criar task para \"Amanda\"",
              "fullTitle": "Testes de cenários felizes da API Rest a nível de Controller Criar task para \"Amanda\"",
              "timedOut": false,
              "duration": 61,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Primeiro faz login para obter token\nconst loginRes = await request(app).post('/login').send(usuario);\nconst token = loginRes.body.token;\nconst resposta = await request(app)\n    .post('/tasks')\n    .set('Authorization', `Bearer ${token}`)\n    .send(task);\nexpect(resposta.status).to.equal(201);\nexpect(resposta.body).to.include({\n    title: task.title,\n    description: task.description,\n    dueDate: task.dueDate,\n    priority: task.priority,\n    status: 'pending'\n});\nexpect(resposta.body).to.have.property('id');",
              "err": {},
              "uuid": "d88f0b16-8102-4c10-b896-43d3c4fe8c9a",
              "parentUUID": "cc00144a-0b79-4379-bc7a-983eee171d75",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Criar task para \"Bruno\"",
              "fullTitle": "Testes de cenários felizes da API Rest a nível de Controller Criar task para \"Bruno\"",
              "timedOut": false,
              "duration": 37,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Primeiro faz login para obter token\nconst loginRes = await request(app).post('/login').send(usuario);\nconst token = loginRes.body.token;\nconst resposta = await request(app)\n    .post('/tasks')\n    .set('Authorization', `Bearer ${token}`)\n    .send(task);\nexpect(resposta.status).to.equal(201);\nexpect(resposta.body).to.include({\n    title: task.title,\n    description: task.description,\n    dueDate: task.dueDate,\n    priority: task.priority,\n    status: 'pending'\n});\nexpect(resposta.body).to.have.property('id');",
              "err": {},
              "uuid": "226a8c42-336c-4667-af00-3cfdc5777f63",
              "parentUUID": "cc00144a-0b79-4379-bc7a-983eee171d75",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Atualizar task para \"Amanda\"",
              "fullTitle": "Testes de cenários felizes da API Rest a nível de Controller Atualizar task para \"Amanda\"",
              "timedOut": false,
              "duration": 60,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const loginRes = await request(app).post('/login').send(usuario);\nconst token = loginRes.body.token;\n// Criar uma task antes de atualizar\nconst createRes = await request(app)\n    .post('/tasks')\n    .set('Authorization', `Bearer ${token}`)\n    .send({\n        title: 'Temp Task',\n        description: 'Temp description',\n        dueDate: '2025-09-21',\n        priority: 'Alta'\n    });\nconst taskId = createRes.body.id;\nconst resposta = await request(app)\n    .put(`/tasks/${taskId}`)\n    .set('Authorization', `Bearer ${token}`)\n    .send(task);\nexpect(resposta.status).to.equal(200);\nexpect(resposta.body).to.include({\n    title: task.title,\n    description: task.description,\n    dueDate: task.dueDate,\n    priority: task.priority,\n    status: task.status\n});",
              "err": {},
              "uuid": "32ec3ca4-1569-4df0-93c0-cb8c012552c5",
              "parentUUID": "cc00144a-0b79-4379-bc7a-983eee171d75",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Concluir task do usuário \"Amanda\"",
              "fullTitle": "Testes de cenários felizes da API Rest a nível de Controller Concluir task do usuário \"Amanda\"",
              "timedOut": false,
              "duration": 45,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const loginRes = await request(app).post('/login').send(usuario);\nconst token = loginRes.body.token;\n// Criar uma task antes de concluir\nconst createRes = await request(app)\n    .post('/tasks')\n    .set('Authorization', `Bearer ${token}`)\n    .send({\n        title: 'Task para concluir',\n        description: 'Descrição qualquer',\n        dueDate: '2025-09-21',\n        priority: 'Alta'\n    });\nconst taskId = createRes.body.id;\nconst resposta = await request(app)\n    .post(`/tasks/${taskId}/complete`)\n    .set('Authorization', `Bearer ${token}`);\nexpect(resposta.status).to.equal(200);\nexpect(resposta.body).to.have.property('message', 'Task marcada como concluída.');",
              "err": {},
              "uuid": "1f60562b-4245-4fb4-9450-c72a4645417f",
              "parentUUID": "cc00144a-0b79-4379-bc7a-983eee171d75",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ca3a0ea9-8dc4-4b9e-a0c1-0ee2e416e549",
            "4fcdab9f-1ebb-490c-a3cf-f576b7664274",
            "cc4ec8ed-020d-496f-8ee1-0e731a8944b3",
            "509128fc-9db7-43cf-8511-edefe8f89a82",
            "d88f0b16-8102-4c10-b896-43d3c4fe8c9a",
            "226a8c42-336c-4667-af00-3cfdc5777f63",
            "32ec3ca4-1569-4df0-93c0-cb8c012552c5",
            "1f60562b-4245-4fb4-9450-c72a4645417f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 406,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.4"
    },
    "marge": {
      "options": null,
      "version": "6.3.0"
    }
  }
}