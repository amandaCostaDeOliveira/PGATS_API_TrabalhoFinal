{
  "stats": {
    "suites": 1,
    "tests": 3,
    "passes": 3,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-19T23:57:01.132Z",
    "end": "2025-09-19T23:57:01.262Z",
    "duration": 130,
    "testsRegistered": 3,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "24dcfe3e-0fc5-4188-9a4b-a0f07e3e76fd",
      "title": "",
      "fullFile": "C:\\Users\\amanda.coliveira\\Documents\\Pessoal\\PosGraduacao\\7 - Automação de Teste na Camada de Serviço (API)\\PGATS_API_TrabalhoFinal\\test\\rest\\external\\testesErrorsExternal.test.js",
      "file": "\\test\\rest\\external\\testesErrorsExternal.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "df90a6b8-e336-499e-bdbf-afd30f1f9dfc",
          "title": "Testes de cenários de erros da API Rest a nível external",
          "fullFile": "C:\\Users\\amanda.coliveira\\Documents\\Pessoal\\PosGraduacao\\7 - Automação de Teste na Camada de Serviço (API)\\PGATS_API_TrabalhoFinal\\test\\rest\\external\\testesErrorsExternal.test.js",
          "file": "\\test\\rest\\external\\testesErrorsExternal.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Testes de cenários de erros da API Rest a nível external\"",
              "fullTitle": "Testes de cenários de erros da API Rest a nível external \"before all\" hook in \"Testes de cenários de erros da API Rest a nível external\"",
              "timedOut": false,
              "duration": 52,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Registrar usuário Amanda (ignora erro se já existir)\nawait request(BASE_URL)\n    .post('/register')\n    .send({ username: \"Amanda\", password: \"123456\" })\n    .catch(() => {});",
              "err": {},
              "uuid": "b2f7f5f8-961c-4da9-bbed-d022b2d9eed5",
              "parentUUID": "df90a6b8-e336-499e-bdbf-afd30f1f9dfc",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Login com credenciais inválidas deve retornar 401",
              "fullTitle": "Testes de cenários de erros da API Rest a nível external Login com credenciais inválidas deve retornar 401",
              "timedOut": false,
              "duration": 26,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(BASE_URL)\n    .post('/login')\n    .send({ username: \"Amanda\", password: \"654321\" });\nexpect(res.status).to.equal(401);\nexpect(res.body).to.have.property('message', 'Credenciais inválidas.');",
              "err": {},
              "uuid": "fca851dd-5c25-4335-9071-ad1fdcc0f602",
              "parentUUID": "df90a6b8-e336-499e-bdbf-afd30f1f9dfc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Não deve permitir criar task com título repetido",
              "fullTitle": "Testes de cenários de erros da API Rest a nível external Não deve permitir criar task com título repetido",
              "timedOut": false,
              "duration": 35,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// login válido para obter token\nconst loginRes = await request(BASE_URL)\n    .post('/login')\n    .send({ username: \"Amanda\", password: \"123456\" });\nconst token = loginRes.body.token;\nexpect(token).to.exist;\n// cria a primeira vez com sucesso\nawait request(BASE_URL)\n    .post('/tasks')\n    .set('Authorization', `Bearer ${token}`)\n    .send({\n        title: \"Criação dos testes external da API Rest\",\n        description: \"Terceira etapa do trabalho final\",\n        dueDate: \"2025-09-21\",\n        priority: \"Alta\"\n    });\n// tenta criar novamente a mesma task\nconst res = await request(BASE_URL)\n    .post('/tasks')\n    .set('Authorization', `Bearer ${token}`)\n    .send({\n        title: \"Criação dos testes external da API Rest\",\n        description: \"Terceira etapa do trabalho final\",\n        dueDate: \"2025-09-21\",\n        priority: \"Alta\"\n    });\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('message', 'Já existe uma task com esse título para este usuário.');",
              "err": {},
              "uuid": "60f498e5-8a68-4b86-8ac1-7234df29e70d",
              "parentUUID": "df90a6b8-e336-499e-bdbf-afd30f1f9dfc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET /tasks sem token deve retornar 401",
              "fullTitle": "Testes de cenários de erros da API Rest a nível external GET /tasks sem token deve retornar 401",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(BASE_URL)\n    .get('/tasks');\nexpect(res.status).to.equal(401);\nexpect(res.body).to.have.property('message', 'Token não fornecido.');",
              "err": {},
              "uuid": "f3ea0594-06a7-47b3-b224-80e6b4cc0677",
              "parentUUID": "df90a6b8-e336-499e-bdbf-afd30f1f9dfc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fca851dd-5c25-4335-9071-ad1fdcc0f602",
            "60f498e5-8a68-4b86-8ac1-7234df29e70d",
            "f3ea0594-06a7-47b3-b224-80e6b4cc0677"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 65,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.4"
    },
    "marge": {
      "options": null,
      "version": "6.3.0"
    }
  }
}