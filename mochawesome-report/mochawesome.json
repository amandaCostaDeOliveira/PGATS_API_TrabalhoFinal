{
  "stats": {
    "suites": 1,
    "tests": 3,
    "passes": 3,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-20T01:08:23.640Z",
    "end": "2025-09-20T01:08:23.837Z",
    "duration": 197,
    "testsRegistered": 3,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "cfcb7199-1332-4051-a97d-ea7abfcd98ce",
      "title": "",
      "fullFile": "C:\\Users\\amanda.coliveira\\Documents\\Pessoal\\PosGraduacao\\7 - Automação de Teste na Camada de Serviço (API)\\PGATS_API_TrabalhoFinal\\test\\graphql\\controller\\testesFelizesController.test.js",
      "file": "\\test\\graphql\\controller\\testesFelizesController.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ab50b018-2e7c-4c7e-8f25-5cf617b73326",
          "title": "Testes de cenários felizes da API GraphQL a nível de Controller",
          "fullFile": "C:\\Users\\amanda.coliveira\\Documents\\Pessoal\\PosGraduacao\\7 - Automação de Teste na Camada de Serviço (API)\\PGATS_API_TrabalhoFinal\\test\\graphql\\controller\\testesFelizesController.test.js",
          "file": "\\test\\graphql\\controller\\testesFelizesController.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Registrar usuário com sucesso",
              "fullTitle": "Testes de cenários felizes da API GraphQL a nível de Controller Registrar usuário com sucesso",
              "timedOut": false,
              "duration": 104,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = `\n  mutation Mutation($username: String!, $password: String!) {\n    register(username: $username, password: $password)\n  }\n`;\nconst variables = {\n  username: \"Amanda\",\n  password: \"123456\"\n};\nconst res = await request(app)\n  .post(\"/graphql\")\n  .send({ query, variables });\nexpect(res.status).to.equal(200);\nexpect(res.body.data.register).to.equal(\"Usuário registrado com sucesso.\");",
              "err": {},
              "uuid": "87278887-5525-4d4d-9e6b-b2851f8dc5ea",
              "parentUUID": "ab50b018-2e7c-4c7e-8f25-5cf617b73326",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Login com sucesso e retorno do token",
              "fullTitle": "Testes de cenários felizes da API GraphQL a nível de Controller Login com sucesso e retorno do token",
              "timedOut": false,
              "duration": 38,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = `\n  mutation Login($username: String!, $password: String!) {\n    login(username: $username, password: $password) {\n      token\n    }\n  }\n`;\nconst variables = {\n  username: \"Amanda\",\n  password: \"123456\"\n};\nconst res = await request(app)\n  .post(\"/graphql\")\n  .send({ query, variables });\nexpect(res.status).to.equal(200);\nexpect(res.body.data.login).to.have.property(\"token\");\nexpect(res.body.data.login.token).to.be.a(\"string\");",
              "err": {},
              "uuid": "91b2f8c6-ef38-417b-9c5e-de743b5515e4",
              "parentUUID": "ab50b018-2e7c-4c7e-8f25-5cf617b73326",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Criar task com sucesso",
              "fullTitle": "Testes de cenários felizes da API GraphQL a nível de Controller Criar task com sucesso",
              "timedOut": false,
              "duration": 49,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const loginQuery = `\n  mutation Login($username: String!, $password: String!) {\n    login(username: $username, password: $password) {\n      token\n    }\n  }\n`;\nconst loginVars = { username: \"Amanda\", password: \"123456\" };\nconst loginRes = await request(app)\n  .post(\"/graphql\")\n  .send({ query: loginQuery, variables: loginVars });\nconst token = loginRes.body.data.login.token;\nconst createTaskQuery = `\n  mutation CreateTask($title: String!, $dueDate: String!, $description: String, $priority: String) {\n    createTask(title: $title, dueDate: $dueDate, description: $description, priority: $priority) {\n      id\n      ownerUsername\n      title\n      description\n      dueDate\n      priority\n      status\n    }\n  }\n`;\nconst createTaskVars = {\n  title: \"Testes Controller API GraphQL\",\n  dueDate: \"21/09/2025\",\n  priority: \"Alta\",\n  description: \"Quinta parte do trabalho final\"\n};\nconst res = await request(app)\n  .post(\"/graphql\")\n  .set(\"Authorization\", `Bearer ${token}`)\n  .send({ query: createTaskQuery, variables: createTaskVars });\nexpect(res.status).to.equal(200);\nexpect(res.body.data.createTask).to.include({\n  ownerUsername: \"Amanda\",\n  title: \"Testes Controller API GraphQL\",\n  description: \"Quinta parte do trabalho final\",\n  dueDate: \"21/09/2025\",\n  priority: \"Alta\",\n  status: \"pending\"\n});\nexpect(res.body.data.createTask).to.have.property(\"id\");",
              "err": {},
              "uuid": "97add781-3aff-4564-a9f4-3031a33d1c06",
              "parentUUID": "ab50b018-2e7c-4c7e-8f25-5cf617b73326",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "87278887-5525-4d4d-9e6b-b2851f8dc5ea",
            "91b2f8c6-ef38-417b-9c5e-de743b5515e4",
            "97add781-3aff-4564-a9f4-3031a33d1c06"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 191,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.4"
    },
    "marge": {
      "options": null,
      "version": "6.3.0"
    }
  }
}